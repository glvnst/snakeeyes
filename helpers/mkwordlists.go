//go:build ignore
// +build ignore

package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"
)

const outputFilename = "wordlists.go"

var sources = map[string]string{
	// original
	"eff":         "wordlists/eff.txt",
	"memorable":   "wordlists/effshort1.txt",
	"touchscreen": "wordlists/effshort2.txt",

	// later
	"got":    "wordlists/got.txt",
	"potter": "wordlists/potter.txt",
	"trek":   "wordlists/startrek.txt",
	"wars":   "wordlists/starwars.txt",
}

const outputHeader = `// Code generated by helpers/mkwordlists.go DO NOT EDIT.
package main

`

func loadWordlist(filename string) (result []string) {
	srcFile, err := os.Open(filename)
	if err != nil {
		log.Fatalf("Unable to load the wordlist source file %s. error: %s", filename, err)
	}
	defer srcFile.Close()

	scanner := bufio.NewScanner(srcFile)
	for scanner.Scan() {
		line := scanner.Text()
		fields := strings.Fields(line)
		if len(fields) != 1 {
			// log.Printf("skipping input line: %s", line)
			continue
		}
		// fmt.Println(fields[1])
		result = append(result, fields[0])
	}
	if err := scanner.Err(); err != nil {
		log.Fatalf("error scanning %s: %s", filename, err)
	}

	return result
}

func main() {
	f, err := os.Create(outputFilename)
	if err != nil {
		log.Fatalf("Unable to open output file %s. error: %s", outputFilename, err)
	}
	defer f.Close()

	f.WriteString(outputHeader)
	f.WriteString("var WordLists map[string][]string = map[string][]string{\n")
	for name, path := range sources {
		log.Printf("Loading %s", name)
		words := loadWordlist(path)
		f.WriteString(fmt.Sprintf("	\"%s\": {\n", name))
		for _, word := range words {
			f.WriteString(fmt.Sprintf("\t\t\"%s\",\n", word))
		}
		f.WriteString("\t},\n")
	}
	f.WriteString("}\n")
}
